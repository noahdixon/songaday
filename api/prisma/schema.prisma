// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Frequency {
  DAILY
  THRICE_WEEKLY
  WEEKLY
  BIWEEKLY
  MONTHLY
}

model User {
  id            Int           @id @default(autoincrement())
  email         String?       @unique
  phone         String?       @unique
  password      String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  lastLogin     DateTime      @default(now())
  token         Token?
  songLikes     SongLike[]    // Relation to the SongLike table
  albumLikes    AlbumLike[]   // Relation to the SongLike table
  artistLikes   ArtistLike[]  // Relation to the SongLike table
  sendEmails    Boolean       @default(true)
  sendTexts     Boolean       @default(true)
  frequency     Frequency     @default(DAILY)
}

model Token {
  userId      Int       @id
  token       String 
  expiresAt   DateTime
  user        User      @relation(fields: [userId], references: [id])
}

model SpotifyToken {
  id          Int       @id @default(autoincrement())
  token       String
  expiresAt   DateTime
}

model SongLike {
  userId      Int          // Foreign key referencing User
  songId      String       
  user        User         @relation(fields: [userId], references: [id]) // Reference to user
  @@id([userId, songId])   // Composite primary key
}

model AlbumLike {
  userId      Int          // Foreign key referencing User
  albumId     String       
  user        User         @relation(fields: [userId], references: [id]) // Reference to user
  @@id([userId, albumId])   // Composite primary key
}

model ArtistLike {
  userId      Int          // Foreign key referencing User
  artistId    String       
  user        User         @relation(fields: [userId], references: [id]) // Reference to user
  @@id([userId, artistId])   // Composite primary key
}